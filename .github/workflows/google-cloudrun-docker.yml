# Hereâ€™s a step-by-step guide to configure a GitHub Actions workflow that builds and deploys your application to Google Cloud Run using the provided YAML configuration.

# ### Step 1: Enable Required Google Cloud APIs

# 1. Go to the Google Cloud Console.
# 2. Navigate to **APIs & Services** > **Library**.
# 3. Search for and enable the following APIs:
#    - **Artifact Registry API** (`artifactregistry.googleapis.com`)
#    - **Cloud Run API** (`run.googleapis.com`)
#    - **IAM Credentials API** (`iamcredentials.googleapis.com`)

# ### Step 2: Create and Configure Workload Identity Provider

# 1. In the **Google Cloud Console**, navigate to **IAM & Admin** > **Workload Identity Federation**.
# 2. Click on **Create Workload Identity Pool**.
# 3. Fill in the required fields (e.g., name, description).
# 4. After creating the pool, click on it and then create a **Provider**.
# 5. Choose **GitHub** as the provider type and follow the instructions to set it up.
# 6. Make sure to note down the **Provider ID**.

# ### Step 3: Grant IAM Permissions

# 1. Go to **IAM & Admin** > **IAM** in the Google Cloud Console.
# 2. Find the service account that will be used for deployment or create a new one.
# 3. Assign the following roles to the service account:
#    - **Artifact Registry Administrator** (`roles/artifactregistry.admin`)
#    - **Cloud Run Developer** (`roles/run.developer`)
# 4. If you created a Workload Identity Provider, ensure that the service account is linked to the provider with the necessary permissions.

# ### Step 4: Store Service Account Key in GitHub Secrets

# 1. In the Google Cloud Console, go to **IAM & Admin** > **Service Accounts**.
# 2. Select the service account you are using and click on **Keys**.
# 3. Click on **Add Key** > **JSON** to download the key file.
# 4. Go to your GitHub repository, navigate to **Settings** > **Secrets and variables** > **Actions**.
# 5. Click on **New repository secret** and add a secret named `GCP_SA_KEY`. Paste the contents of the JSON key file into the value field.

# ### Step 5: Update the Workflow Configuration

# Make sure the values in the `env` block of your workflow YAML match your project settings:

# ```yaml
# env:
#   PROJECT_ID: 'your-gcp-project-id'  # Replace with your GCP Project ID
#   REGION: 'your-region'                # e.g., 'asia-southeast1'
#   SERVICE: 'your-cloud-run-service'    # Name of your Cloud Run service
#   REPO_NAME: 'your-repo-name'          # Name of your Artifact Registry repository
# ```

# ### Step 6: Commit the Workflow File

# 1. Create a new file in your repository under `.github/workflows/deploy.yml`.
# 2. Copy and paste the entire workflow YAML configuration you provided into this file.
# 3. Commit the changes to the `cloudrun` branch.

# ### Step 7: Trigger the Deployment

# 1. Push a commit to the `cloudrun` branch of your repository.
# 2. This should trigger the GitHub Actions workflow, which will build the Docker container, push it to Google Artifact Registry, and deploy it to Cloud Run.

# ### Step 8: Verify Deployment

# 1. After the workflow completes, check the output logs in the GitHub Actions tab to see if the deployment was successful.
# 2. You can also verify the deployment by going to the **Cloud Run** section in the Google Cloud Console and checking the service URL.

name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - 'cloudrun'

env:
  PROJECT_ID: 'vt-gcp-sandbox'
  REGION: 'asia-southeast1'
  SERVICE: 'learn-action-app'
  REPO_NAME: 'colgate-latam-repo'

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332'

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Docker Buildx'
        uses: 'docker/setup-buildx-action@v2'

      - name: 'Build and Push Container'
        run: |-
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE }}:latest"
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
          docker build --tag "${DOCKER_TAG}" ./cloudrun
          docker push "${DOCKER_TAG}"

      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE }}:latest'

      - name: 'Show output'
        run: |2-
          echo "Cloud Run URL: ${{ steps.deploy.outputs.url }}"
